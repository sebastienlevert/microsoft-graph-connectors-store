{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "accountName": {
      "type": "string",
      "defaultValue": "sql-cosmos",
      "metadata": {
        "description": "Cosmos DB account name, max length 44 characters"
      }
    },
    "adminGroupId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "ID of the group which will be granted access to each item created."
      }
    }
  },
  "variables": {
    "storageAccount": {
      "name": "[concat('mgcstorestorage', substring(uniqueString(resourceGroup().name),0,7))]",
      "blob": {
        "name": "[concat('mgcstoreblob', substring(uniqueString(resourceGroup().name),0,7))]"
      }
    },
    "appService": {
      "name": "[concat('ASP-FHLSpring21-af0d', substring(uniqueString(resourceGroup().name),0,7))]"
    },
    "functionApp": {
      "name": "[concat('functionApp', substring(uniqueString(resourceGroup().name),0,7))]"
    },
    "cosmosDB": {
      "name": "[concat('mgcstore', substring(uniqueString(resourceGroup().name),0,7))]",
      "accountName": "[toLower(parameters('accountName'))]",
      "container":{
        "name": "mgccontainer"
      }
    },
    "appInsights": {
      "name": "[concat('mgcInsights', substring(uniqueString(resourceGroup().name),0,7))]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2020-08-01-preview",
      "name": "[variables('storageAccount').name]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_RAGRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2020-08-01-preview",
      "name": "[concat(variables('storageAccount').name, '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccount').name)]"
      ],
      "sku": {
        "name": "Standard_RAGRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "name": "[concat(variables('storageAccount').name, '/default/', variables('storageAccount').blob.name)]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccount').name, 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccount').name)]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "Container"
      }
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('appService').name]",
      "type": "Microsoft.Web/serverfarms",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "F1",
        "capacity": "[int(1)]"
      },
      "properties": {
        "name": "[variables('appService').name]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageAccount').name, 'default', variables('storageAccount').blob.name)]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2021-01-15",
      "name": "[variables('cosmosDB').accountName]",
      "location": "[resourceGroup().location]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Eventual",
          "maxStalenessPrefix": 1,
          "maxIntervalInSeconds": 5
        },
        "locations": [
          {
            "locationName": "[resourceGroup().location]",
            "failoverPriority": 0
          }
        ],
        "databaseAccountOfferType": "Standard",
        "enableAutomaticFailover": true,
        "enableMultipleWriteLocations": true
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2021-01-15",
      "name": "[concat(variables('cosmosDB').accountName, '/', variables('cosmosDB').name)]",
      "dependsOn": [ "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDB').accountName)]" ],
      "properties": {
        "resource": {
          "id": "[variables('cosmosDB').name]"
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2021-01-15",
      "name": "[concat(variables('cosmosDB').accountName, '/', variables('cosmosDB').name, '/', variables('cosmosDB').container.name)]",
      "dependsOn": [ "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosDB').accountName, variables('cosmosDB').name)]" ],
      "properties": {
        "resource": {
          "id": "[variables('cosmosDB').container.name]",
          "partitionKey": {
            "paths": [
              "/title"
            ],
            "kind": "Hash"
          },
          "indexingPolicy": {
            "indexingMode": "consistent",
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "uniqueKeyPolicy": {
            "uniqueKeys": []
          }
        }
      }
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[variables('appInsights').name]",
      "type": "Microsoft.Insights/components",
      "location": "[resourceGroup().location]",
      "properties": {
        "applicationId": "[variables('appInsights').name]"
      }
    },
    {
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('functionApp').name]",
      "location": "[resourceGroup().location]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appService').name)]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccount').name)]",
        "[resourceId('Microsoft.Insights/components', variables('appInsights').name)]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appService').name)]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccount').name, ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccount').name), '2015-05-01-preview').key1)]"
            },
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccount').name, ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccount').name), '2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccount').name, ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccount').name), '2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('functionApp').name)]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~2"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('microsoft.insights/components/', variables('appInsights').name)).InstrumentationKey]"
            },
            {
              "name": "ADMIN_GROUP_ID",
              "value": "[parameters('adminGroupId')]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "PopulateCosmosDB",
      "location": "[resourceGroup().location]",
      "kind": "AzurePowerShell",
      "properties": {
        "forceUpdateTag": "1",
        "azPowerShellVersion": "3.0",
        "environmentVariables": [
          {
            "name": "MasterKey",
            "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDB').accountName), '2021-01-15').primaryMasterKey]"
          },
          {
            "name": "EndpointURI",
            "value": "[concat('https://', variables('cosmosDB').accountName, 'documents.azure.com:443/')]"
          },
          {
            "name": "DatabaseID",
            "value": "[variables('cosmosDB').name]"
          },
          {
            "name": "ContainerID",
            "value": "[variables('cosmosDB').container.name]"
          }
        ],
        "primaryScriptUri": "https://raw.githubusercontent.com/sebastienlevert/microsoft-graph-connectors-store/ARM/ARM%20Templates/PopulateCosmosDB.ps1",
        "timeout": "PT30M",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D",
        "dependsOn": [
          "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', variables('cosmosDB').accountName, variables('cosmosDB').name, variables('cosmosDB').container.name)]"
        ]
      }
    }
  ]
}
